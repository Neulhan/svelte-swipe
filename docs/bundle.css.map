{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\dev\\App.svelte",
    "..\\src\\SwipeItem.svelte",
    "..\\src\\Swipe.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Swipe, SwipeItem } from \"../src/index.js\";\n  let autoplay = false;\n  let delay = 1000;\n  let showIndicators = true;\n  let transitionDuration = '200';\n  \n  function toggle(){\n    autoplay = !autoplay;\n  }\n\n</script>\n\n<style>\n  :root{\n    --sv-swipe-panel-height: 600px;\n    --sv-swipe-panel-width: 100vw;\n    --sv-swipe-indicator-active-color:white;\n  }\n  .container{\n    height: 100%;\n    width: 100%;\n  }\n  .is-center{\n    display: flex;\n    justify-content: center;\n    border: 1px solid green;\n    position: absolute;\n    width: 99%;\n    height: 100%;\n  }\n  img{\n    height: 100%;\n    width: 100%;\n  }\n</style>\n\n<div class=\"container\" >\n  <Swipe {showIndicators} {autoplay} {delay} {transitionDuration}>\n    <SwipeItem classes=\"is-center\">\n      <img src=\"./images/1.jpg\" alt=\"\">\n    </SwipeItem>\n\n    <SwipeItem classes=\"is-center\">\n      <img src=\"./images/2.jpg\" alt=\"\">\n    </SwipeItem>\n\n    <SwipeItem classes=\"is-center\">\n      <img src=\"./images/3.jpg\" alt=\"\">\n    </SwipeItem>\n\n    <SwipeItem classes=\"is-center\">\n      <img src=\"./images/4.jpg\" alt=\"\">\n    </SwipeItem>\n  </Swipe>\n  <div style=\"margin-top: 100px\">\n    <button on:click={toggle} >{autoplay ? 'Stop': 'Play'}</button>\n    Delay: <input type=\"text\" bind:value={delay} />\n    Transition Duration: <input type=\"text\" bind:value={transitionDuration} /> ms\n  </div>\n</div>\n\n",
    "<script>\r\n  export let classes = '';\r\n</script>\r\n\r\n<style>\r\n  .swipeable-item {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    transition-timing-function: ease-out;\r\n  }\r\n</style>\r\n\r\n<div class=\"swipeable-item {classes}\">\r\n    <slot />\r\n</div>",
    "<script>\r\n\r\n  import { onMount, onDestroy } from 'svelte';\r\n\r\n  \r\n  export let transitionDuration = 200;\r\n  export let showIndicators = false;\r\n  export let autoplay = false;\r\n  export let delay = 1000;\r\n\r\n\r\n\r\n  let activeIndicator = 0;\r\n  let indicators;\r\n  let items = 0;\r\n  let availableWidth = 0;\r\n  let topClearence = 0;\r\n\r\n  let elems;\r\n  let diff = 0;\r\n\r\n  let swipeWrapper;\r\n  let swipeHandler;\r\n\r\n  let min = 0;\r\n  let touchingTpl = `\r\n    -webkit-transition-duration: 0s;\r\n    transition-duration: 0s; \r\n    -webkit-transform: translate3d(-{{val}}px, 0, 0);\r\n    -ms-transform: translate3d(-{{val}}px, 0, 0);`;\r\n  let non_touchingTpl = `\r\n    -webkit-transition-duration: ${transitionDuration}ms;\r\n    transition-duration: ${transitionDuration}ms; \r\n    -webkit-transform: translate3d(-{{val}}px, 0, 0);\r\n    -ms-transform: translate3d(-{{val}}px, 0, 0);`;\r\n  let touching = false;\r\n  let posX = 0;\r\n  let dir = 0;\r\n  let x;\r\n  \r\n  \r\n \r\n  let played = 0;\r\n  let run_interval = false;\r\n\r\n  $: indicators = Array(items);\r\n\r\n  $: {\r\n    if(autoplay && !run_interval){\r\n      run_interval = setInterval(changeView , delay);\r\n    }\r\n\r\n    if(!autoplay && run_interval){\r\n      clearInterval(run_interval)\r\n      run_interval = false;\r\n    }\r\n  }\r\n  \r\n\r\n  function update(){\r\n    swipeHandler.style.top = topClearence + 'px';\r\n    availableWidth = swipeWrapper.querySelector('.swipeable-items').offsetWidth;\r\n    for (let i = 0; i < items; i++) {\r\n      elems[i].style.transform = 'translate3d(' + (availableWidth * i) + 'px, 0, 0)';\r\n    }\r\n    diff = 0;\r\n  }\r\n\r\n  function init(){\r\n    elems = swipeWrapper.querySelectorAll('.swipeable-item');\r\n    items = elems.length;\r\n    update();\r\n  }\r\n\r\n  onMount(() => {\r\n    init();\r\n    window.addEventListener('resize', update);\r\n  });\r\n\r\n  \r\n  \r\n  onDestroy(()=>{\r\n    window.removeEventListener('resize', update);\r\n  })\r\n\r\n  function moveHandler(e){\r\n    if (touching) {\r\n      e.stopImmediatePropagation();\r\n      e.stopPropagation();\r\n\r\n      \r\n      let max = availableWidth;\r\n\r\n      let _x = e.touches ? e.touches[0].pageX : e.pageX;\r\n      let _diff = (x - _x) + posX;\r\n      let dir = _x > x ? 0 : 1;\r\n      if (!dir) { _diff = posX - (_x - x) }\r\n      if (_diff <= (max * (items - 1)) && _diff >= min) {\r\n\r\n        for (let i = 0; i < items; i++) {\r\n          let template = i < 0 ? '{{val}}' : '-{{val}}';\r\n          let _value = (max * i) - _diff;\r\n          elems[i].style.cssText = touchingTpl.replace(template, _value).replace(template, _value);\r\n        }\r\n\r\n        diff = _diff;\r\n      }\r\n     \r\n    }\r\n  }\r\n\r\n  function endHandler(e) {\r\n    e && e.stopImmediatePropagation();\r\n    e && e.stopPropagation();\r\n    e && e.preventDefault();\r\n\r\n    let max = availableWidth;\r\n\r\n    touching = false;\r\n    x = null;\r\n\r\n\r\n    \r\n    let swipe_threshold = 0.85;\r\n    let d_max = (diff / max);\r\n    let _target = Math.round(d_max);\r\n    \r\n    if(Math.abs(_target - d_max) < swipe_threshold ){\r\n      diff = _target * max;\r\n    }else{\r\n      diff = (dir ? (_target - 1) : (_target + 1)) * max;\r\n    }\r\n\r\n    posX = diff;\r\n    activeIndicator = (diff / max);\r\n    for (let i = 0; i < items; i++) {\r\n      let template = i < 0 ? '{{val}}' : '-{{val}}';\r\n      let _value = (max * i) - posX;\r\n      elems[i].style.cssText = non_touchingTpl.replace(template, _value).replace(template, _value);\r\n    }\r\n\r\n    window.removeEventListener('mousemove', moveHandler);\r\n    window.removeEventListener('mouseup', endHandler);\r\n    window.removeEventListener('touchmove', moveHandler);\r\n    window.removeEventListener('touchend', endHandler);\r\n  }\r\n\r\n  function moveStart(e){\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    let max = availableWidth;\r\n\r\n    touching = true;\r\n    x = e.touches ? e.touches[0].pageX : e.pageX;\r\n    window.addEventListener('mousemove', moveHandler);\r\n    window.addEventListener('mouseup', endHandler);\r\n    window.addEventListener('touchmove', moveHandler);\r\n    window.addEventListener('touchend', endHandler);\r\n  }\r\n\r\n  function changeItem(item) {\r\n    let max = availableWidth;\r\n    diff = max * item;\r\n    activeIndicator = item;\r\n    endHandler();\r\n  }\r\n\r\n  function changeView() {\r\n    changeItem(played);\r\n    played = played < (items - 1) ? ++played : 0;\r\n  }\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n.swipe-panel {\r\n  position: relative;\r\n  height: var(--sv-swipe-panel-height, 100%);\r\n  width: var(--sv-swipe-panel-width, 100%);\r\n}\r\n.swipe-item-wrapper{\r\n  overflow: hidden;\r\n  position: relative;\r\n  height: inherit;\r\n}\r\n\r\n.swipeable-items,\r\n.swipeable-slot-wrapper {\r\n  position: relative;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n.swipe-handler {\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 40px;\r\n  bottom: 40px;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0,0,0,0);\r\n}\r\n.swipe-indicator {\r\n  position: relative;\r\n  bottom: 2rem;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.dot {\r\n  height: 10px;\r\n  width: 10px;\r\n  background-color: transparent;\r\n  border: 1px solid grey;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n  margin: 0px 2px;\r\n  cursor: pointer;\r\n}\r\n.swipe-indicator .is-active {\r\n  background-color: var(--sv-swipe-indicator-active-color, grey);\r\n}\r\n  \r\n</style>\r\n\r\n<div class=\"swipe-panel\">\r\n  <div class=\"swipe-item-wrapper\" bind:this={swipeWrapper}>\r\n    <div class=\"swipeable-items\">\r\n      <div class=\"swipeable-slot-wrapper\">\r\n        <slot />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"swipe-handler\" bind:this={swipeHandler} on:touchstart={moveStart} on:mousedown={moveStart}></div>\r\n   {#if showIndicators}\r\n     <div class=\"swipe-indicator swipe-indicator-inside\">\r\n        {#each indicators as x, i }\r\n          <span class=\"dot {activeIndicator == i ? 'is-active' : ''}\" on:click={() => {changeItem(i)}}></span>\r\n        {/each}\r\n    </div>\r\n   {/if}\r\n\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAcE,KAAK,CAAC,AACJ,uBAAuB,CAAE,KAAK,CAC9B,sBAAsB,CAAE,KAAK,CAC7B,kCAAkC,KAAK,AACzC,CAAC,AACD,wBAAU,CAAC,AACT,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AASD,iBAAG,CAAC,AACF,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC;AC7BD,eAAe,cAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,0BAA0B,CAAE,QAAQ,AACtC,CAAC;ACsKH,YAAY,eAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAC1C,KAAK,CAAE,IAAI,sBAAsB,CAAC,KAAK,CAAC,AAC1C,CAAC,AACD,kCAAmB,CAAC,AAClB,QAAQ,CAAE,MAAM,CAChB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,+BAAgB,CAChB,uBAAuB,eAAC,CAAC,AACvB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,cAAc,eAAC,CAAC,AACd,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAC3B,CAAC,AACD,gBAAgB,eAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,WAAW,CAC7B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,+BAAgB,CAAC,UAAU,eAAC,CAAC,AAC3B,gBAAgB,CAAE,IAAI,iCAAiC,CAAC,KAAK,CAAC,AAChE,CAAC"
}